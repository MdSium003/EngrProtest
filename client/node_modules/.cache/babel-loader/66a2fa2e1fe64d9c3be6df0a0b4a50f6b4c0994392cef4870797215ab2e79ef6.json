{"ast":null,"code":"var _jsxFileName = \"E:\\\\EngrProtest\\\\EngrProtest\\\\client\\\\src\\\\components\\\\Videos.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Videos = ({\n  token\n}) => {\n  _s();\n  const [videos, setVideos] = useState([]);\n  const [videoUrl, setVideoUrl] = useState('');\n  const [title, setTitle] = useState('');\n  const isAdmin = Boolean(token);\n\n  /**\r\n   * Converts a regular YouTube URL into an embeddable URL.\r\n   * @param {string} url - The original YouTube URL.\r\n   * @returns {string|null} The embeddable URL or null if the ID can't be found.\r\n   */\n  const getYouTubeEmbedUrl = url => {\n    let videoId = null;\n    try {\n      // Tries to match youtube.com/watch?v=VIDEO_ID or youtu.be/VIDEO_ID formats\n      const regex = /(?:https?:\\/\\/)?(?:www\\.)?(?:youtube\\.com\\/(?:[^\\/\\n\\s]+\\/\\S+\\/|(?:v|e(?:mbed)?)\\/|\\S*?[?&]v=)|youtu\\.be\\/)([a-zA-Z0-9_-]{11})/;\n      const match = url.match(regex);\n      if (match) {\n        videoId = match[1];\n      }\n    } catch (error) {\n      console.error(\"Could not parse YouTube URL\", error);\n      return null;\n    }\n    return videoId ? `https://www.youtube.com/embed/${videoId}` : null;\n  };\n  const fetchVideos = async () => {\n    const res = await fetch('/api/videos');\n    const data = await res.json();\n    setVideos(data);\n  };\n  useEffect(() => {\n    fetchVideos();\n  }, []);\n  const handleAdd = async e => {\n    e.preventDefault();\n    await fetch('/api/videos', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-auth-token': token\n      },\n      body: JSON.stringify({\n        video_url: videoUrl,\n        title\n      })\n    });\n    setVideoUrl('');\n    setTitle('');\n    fetchVideos();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Videos\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), isAdmin && /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleAdd,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"url\",\n        placeholder: \"Video URL (YouTube, etc.)\",\n        value: videoUrl,\n        onChange: e => setVideoUrl(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Title (optional)\",\n        value: title,\n        onChange: e => setTitle(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this), videos.map(v => {\n      const embedUrl = getYouTubeEmbedUrl(v.video_url);\n      if (!embedUrl) {\n        // Fallback for non-YouTube links or parsing errors\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card\",\n          children: [v.title && /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: v.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 27\n          }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n            href: v.video_url,\n            target: \"_blank\",\n            rel: \"noreferrer\",\n            children: v.video_url\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 15\n          }, this)]\n        }, v.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this);\n      }\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        children: [v.title && /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: v.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"video-responsive\",\n          children: /*#__PURE__*/_jsxDEV(\"iframe\", {\n            width: \"560\",\n            height: \"315\",\n            src: embedUrl,\n            title: v.title || 'YouTube video player',\n            frameBorder: \"0\",\n            allow: \"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\",\n            allowFullScreen: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this)]\n      }, v.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(Videos, \"0nPy6eGkqMOBlg9JBksPrq3L5Rs=\");\n_c = Videos;\nexport default Videos;\nvar _c;\n$RefreshReg$(_c, \"Videos\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Videos","token","_s","videos","setVideos","videoUrl","setVideoUrl","title","setTitle","isAdmin","Boolean","getYouTubeEmbedUrl","url","videoId","regex","match","error","console","fetchVideos","res","fetch","data","json","handleAdd","e","preventDefault","method","headers","body","JSON","stringify","video_url","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","value","onChange","target","required","map","v","embedUrl","href","rel","id","width","height","src","frameBorder","allow","allowFullScreen","_c","$RefreshReg$"],"sources":["E:/EngrProtest/EngrProtest/client/src/components/Videos.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nconst Videos = ({ token }) => {\r\n  const [videos, setVideos] = useState([]);\r\n  const [videoUrl, setVideoUrl] = useState('');\r\n  const [title, setTitle] = useState('');\r\n  const isAdmin = Boolean(token);\r\n\r\n  /**\r\n   * Converts a regular YouTube URL into an embeddable URL.\r\n   * @param {string} url - The original YouTube URL.\r\n   * @returns {string|null} The embeddable URL or null if the ID can't be found.\r\n   */\r\n  const getYouTubeEmbedUrl = (url) => {\r\n    let videoId = null;\r\n    try {\r\n      // Tries to match youtube.com/watch?v=VIDEO_ID or youtu.be/VIDEO_ID formats\r\n      const regex = /(?:https?:\\/\\/)?(?:www\\.)?(?:youtube\\.com\\/(?:[^\\/\\n\\s]+\\/\\S+\\/|(?:v|e(?:mbed)?)\\/|\\S*?[?&]v=)|youtu\\.be\\/)([a-zA-Z0-9_-]{11})/;\r\n      const match = url.match(regex);\r\n      if (match) {\r\n        videoId = match[1];\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Could not parse YouTube URL\", error);\r\n      return null;\r\n    }\r\n    \r\n    return videoId ? `https://www.youtube.com/embed/${videoId}` : null;\r\n  };\r\n\r\n  const fetchVideos = async () => {\r\n    const res = await fetch('/api/videos');\r\n    const data = await res.json();\r\n    setVideos(data);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchVideos();\r\n  }, []);\r\n\r\n  const handleAdd = async (e) => {\r\n    e.preventDefault();\r\n    await fetch('/api/videos', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'x-auth-token': token\r\n      },\r\n      body: JSON.stringify({ video_url: videoUrl, title })\r\n    });\r\n    setVideoUrl('');\r\n    setTitle('');\r\n    fetchVideos();\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h2>Videos</h2>\r\n      {isAdmin && (\r\n        <form onSubmit={handleAdd}>\r\n          <input type=\"url\" placeholder=\"Video URL (YouTube, etc.)\" value={videoUrl} onChange={(e) => setVideoUrl(e.target.value)} required />\r\n          <input type=\"text\" placeholder=\"Title (optional)\" value={title} onChange={(e) => setTitle(e.target.value)} />\r\n          <button type=\"submit\">Add</button>\r\n        </form>\r\n      )}\r\n\r\n      {videos.map((v) => {\r\n        const embedUrl = getYouTubeEmbedUrl(v.video_url);\r\n        if (!embedUrl) {\r\n          // Fallback for non-YouTube links or parsing errors\r\n          return (\r\n            <div className=\"card\" key={v.id}>\r\n              {v.title && <h4>{v.title}</h4>}\r\n              <a href={v.video_url} target=\"_blank\" rel=\"noreferrer\">{v.video_url}</a>\r\n            </div>\r\n          );\r\n        }\r\n        return (\r\n          <div className=\"card\" key={v.id}>\r\n            {v.title && <h4>{v.title}</h4>}\r\n            <div className=\"video-responsive\">\r\n              <iframe\r\n                width=\"560\"\r\n                height=\"315\"\r\n                src={embedUrl}\r\n                title={v.title || 'YouTube video player'}\r\n                frameBorder=\"0\"\r\n                allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\r\n                allowFullScreen\r\n              ></iframe>\r\n            </div>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Videos;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}